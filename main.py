import logging
import asyncio
import sqlite3
import os

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from datetime import datetime, timedelta

from Application.Services.StudentService import StudentService
from Application.Services.LessonService import LessonService
from Application.Respones.Student import ResponseStudentInitial, ResponseParentInitial
from Application.ReminderScheduler import start_reminder_scheduler

from Infrastructure.Config import async_session_factory
from Infrastructure.Repositories.StudentRepository import StudentRepository
from Infrastructure.Repositories.LessonRepository import LessonRepository
from Infrastructure.Repositories.TimeSlotRepository import TimeSlotRepository
from Infrastructure.Repositories.TeacherRepository import TeacherRepository

load_dotenv()

BASE_DIR = os.path.dirname(__file__)
DB_PATH  = os.path.join(BASE_DIR, 'online_school.db')

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
user_ids = {}

MONTHS_RU = {
    "January": "—è–Ω–≤–∞—Ä—è",
    "February": "—Ñ–µ–≤—Ä–∞–ª—è",
    "March": "–º–∞—Ä—Ç–∞",
    "April": "–∞–ø—Ä–µ–ª—è",
    "May": "–º–∞—è",
    "June": "–∏—é–Ω—è",
    "July": "–∏—é–ª—è",
    "August": "–∞–≤–≥—É—Å—Ç–∞",
    "September": "—Å–µ–Ω—Ç—è–±—Ä—è",
    "October": "–æ–∫—Ç—è–±—Ä—è",
    "November": "–Ω–æ—è–±—Ä—è",
    "December": "–¥–µ–∫–∞–±—Ä—è",
}


async def create_services():
    session = async_session_factory()

    student_repo = StudentRepository(session)
    lesson_repo = LessonRepository(session)
    time_slot_repo = TimeSlotRepository(session)
    teacher_repo = TeacherRepository(session)

    student_service = StudentService(student_repo)
    lesson_service = LessonService(lesson_repo, time_slot_repo, teacher_repo)

    return student_service, lesson_service


def create_schedule_reset_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")], [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]],
        resize_keyboard=True
    )


@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    username = message.from_user.username
    tg_id    = message.from_user.id

    user_ids[username] = tg_id

    logging.info(f"[START] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} (ID={tg_id})")

    conn = sqlite3.connect(DB_PATH)
    cur  = conn.cursor()


    cur.execute(
        """
        UPDATE students
           SET student_telegram_id = ?
         WHERE student_contact = ?
        """,
        (tg_id, username)
    )

    cur.execute(
        """
        UPDATE students
           SET parent_telegram_id = ?
         WHERE parent_contact = ?
        """,
        (tg_id, username)
    )
    cur.execute(
        "UPDATE teachers SET telegram_id = ? WHERE telegram_tag = ?",
        (tg_id, username)
    )

    conn.commit()
    conn.close()

    student_service, _ = await create_services()
    student: ResponseStudentInitial = await student_service.initial_search_student_by_teg(username)
    parent:  ResponseParentInitial  = await student_service.initial_search_parent_by_teg(username)

    logging.info(f"[START] –ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {student}")
    logging.info(f"[START] –ù–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å: {parent}")

    if student:
        text = (
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ:\n"
            f"–ò–º—è —É—á–µ–Ω–∏–∫–∞: {student.name}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç —É—á–µ–Ω–∏–∫–∞: {student.tg_teg}\n"
            f"–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è: {student.parent_name}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç —Ä–æ–¥–∏—Ç–µ–ª—è: {student.parent_tg_teg}"
        )
        await message.answer(text, reply_markup=create_schedule_reset_keyboard())

    elif parent:
        text = (
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–∏—Ç–µ–ª–µ:\n"
            f"–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è: {parent.name}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç —Ä–æ–¥–∏—Ç–µ–ª—è: {parent.tg_teg}\n"
            f"–î–µ—Ç–∏:\n"
        )
        for child in parent.students:
            payment_status = "–û–ø–ª–∞—á–µ–Ω–æ" if child.payment_status else "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
            text += (
                f"- –ò–º—è —Ä–µ–±–µ–Ω–∫–∞: {child.name}\n"
                f"  –ö–æ–Ω—Ç–∞–∫—Ç —Ä–µ–±–µ–Ω–∫–∞: {child.tg_teg}\n"
                f"  –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {payment_status}\n"
            )
        await message.answer(text, reply_markup=create_schedule_reset_keyboard())

    else:
        await message.answer(
            "–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )


@dp.message(lambda msg: msg.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def handle_schedule(message: types.Message):
    username = message.from_user.username
    logging.info(f"[SCHEDULE] –ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç: {username}")
    user_ids[username] = message.from_user.id

    student_service, lesson_service = await create_services()
    student: ResponseStudentInitial = await student_service.initial_search_student_by_teg(username)
    parent: ResponseParentInitial = await student_service.initial_search_parent_by_teg(username)

    logging.info(f"[SCHEDULE] –ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {student}")
    logging.info(f"[SCHEDULE] –ù–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å: {parent}")

    if student:
        lessons = await lesson_service.get_schedule_by_student_id(student.self_id)
        logging.info(f"[SCHEDULE] –£—Ä–æ–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.name}: {lessons}")

        if lessons:
            response = "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
            for lesson in lessons:
                date_obj = lesson.self_datetime.date()
                time_obj = lesson.self_datetime.time()
                month_ru = MONTHS_RU[date_obj.strftime("%B")]
                formatted_date = date_obj.strftime(f"%d {month_ru}")
                start = time_obj.strftime("%H:%M")
                end_time = (datetime.combine(date_obj, time_obj) + timedelta(minutes=30)).time()
                end = end_time.strftime("%H:%M")
                response += f"üìö {lesson.subject_name} ‚Äî {formatted_date} —Å {start} –¥–æ {end} (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.teacher_name})\n"
        else:
            response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
        await message.answer(response)

    elif parent:
        response = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π:\n"
        for child in parent.students:
            lessons = await lesson_service.get_schedule_by_student_id(child.self_id)

            if lessons:
                response += f"\nüìå {child.name}:\n"
                for lesson in lessons:
                    date_obj = lesson.self_datetime.date()
                    time_obj = lesson.self_datetime.time()
                    month_ru = MONTHS_RU[date_obj.strftime("%B")]
                    formatted_date = date_obj.strftime(f"%d {month_ru}")
                    start = time_obj.strftime("%H:%M")
                    end_time = (datetime.combine(date_obj, time_obj) + timedelta(minutes=30)).time()
                    end = end_time.strftime("%H:%M")
                    response += f"üìö {lesson.subject_name} ‚Äî {formatted_date} —Å {start} –¥–æ {end} (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.teacher_name})\n"
            else:
                response += f"\nüìå {child.name}:\n–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.\n"

        await message.answer(response)

    else:
        await message.answer("–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


@dp.message(Command("reset"))
async def reset_cmd(message: types.Message):
    await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.", reply_markup=ReplyKeyboardRemove())


async def main():
    start_reminder_scheduler(bot)
    dp.message.register(start_cmd)
    dp.message.register(handle_schedule)
    dp.message.register(reset_cmd)
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
